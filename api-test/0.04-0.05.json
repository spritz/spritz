[
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "newElement": "method spritz.Subscription spritz.Stream<T>::forEach(java.util.function.Consumer<T>) @ spritz.ConnectableStream<T>",
    "oldElement": "method void spritz.Stream<T>::forEach(java.util.function.Consumer<T>) @ spritz.ConnectableStream<T>",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "spritz.ConnectableStream",
      "classSimpleName": "ConnectableStream",
      "elementKind": "method",
      "methodName": "forEach",
      "package": "spritz"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "newElement": "method spritz.Subscription spritz.Stream<T>::forEach(java.util.function.Consumer<T>) @ spritz.Hub<MessageInT, MessageOutT>",
    "oldElement": "method void spritz.Stream<T>::forEach(java.util.function.Consumer<T>) @ spritz.Hub<MessageInT, MessageOutT>",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "spritz.Hub",
      "classSimpleName": "Hub",
      "elementKind": "method",
      "methodName": "forEach",
      "package": "spritz"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "newElement": "method spritz.Subscription spritz.Stream<T>::forEach(java.util.function.Consumer<T>) @ spritz.Subject<T>",
    "oldElement": "method void spritz.Stream<T>::forEach(java.util.function.Consumer<T>) @ spritz.Subject<T>",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "spritz.Subject",
      "classSimpleName": "Subject",
      "elementKind": "method",
      "methodName": "forEach",
      "package": "spritz"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "newElement": "method spritz.Subscription spritz.Stream<T>::forEach(java.util.function.Consumer<T>) @ spritz.WebSocketHub",
    "oldElement": "method void spritz.Stream<T>::forEach(java.util.function.Consumer<T>) @ spritz.WebSocketHub",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "spritz.WebSocketHub",
      "classSimpleName": "WebSocketHub",
      "elementKind": "method",
      "methodName": "forEach",
      "package": "spritz"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "newElement": "method spritz.Subscription spritz.Stream<T>::forEach(java.util.function.Consumer<T>)",
    "oldElement": "method void spritz.Stream<T>::forEach(java.util.function.Consumer<T>)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "spritz.Stream",
      "classSimpleName": "Stream",
      "elementKind": "method",
      "methodName": "forEach",
      "package": "spritz"
    }
  },
  {
    "code": "java.method.returnTypeChanged",
    "description": "The return type changed from 'void' to  'spritz.Subscription'.",
    "newElement": "method spritz.Subscription spritz.Stream<T>::forEach(java.util.function.Consumer<T>)",
    "oldElement": "method void spritz.Stream<T>::forEach(java.util.function.Consumer<T>)",
    "classification": {
      "SOURCE": "POTENTIALLY_BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "spritz.Stream",
      "classSimpleName": "Stream",
      "elementKind": "method",
      "methodName": "forEach",
      "newType": "spritz.Subscription",
      "oldType": "void",
      "package": "spritz"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "newElement": "method spritz.Subscription spritz.Stream<T>::subscribe(spritz.EventEmitter<T>) @ spritz.ConnectableStream<T>",
    "oldElement": "method void spritz.Stream<T>::subscribe(spritz.EventEmitter<T>) @ spritz.ConnectableStream<T>",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "spritz.ConnectableStream",
      "classSimpleName": "ConnectableStream",
      "elementKind": "method",
      "methodName": "subscribe",
      "package": "spritz"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "newElement": "method spritz.Subscription spritz.Stream<T>::subscribe(spritz.EventEmitter<T>) @ spritz.Hub<MessageInT, MessageOutT>",
    "oldElement": "method void spritz.Stream<T>::subscribe(spritz.EventEmitter<T>) @ spritz.Hub<MessageInT, MessageOutT>",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "spritz.Hub",
      "classSimpleName": "Hub",
      "elementKind": "method",
      "methodName": "subscribe",
      "package": "spritz"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "newElement": "method spritz.Subscription spritz.Stream<T>::subscribe(spritz.EventEmitter<T>) @ spritz.Subject<T>",
    "oldElement": "method void spritz.Stream<T>::subscribe(spritz.EventEmitter<T>) @ spritz.Subject<T>",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "spritz.Subject",
      "classSimpleName": "Subject",
      "elementKind": "method",
      "methodName": "subscribe",
      "package": "spritz"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "newElement": "method spritz.Subscription spritz.Stream<T>::subscribe(spritz.EventEmitter<T>) @ spritz.WebSocketHub",
    "oldElement": "method void spritz.Stream<T>::subscribe(spritz.EventEmitter<T>) @ spritz.WebSocketHub",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "spritz.WebSocketHub",
      "classSimpleName": "WebSocketHub",
      "elementKind": "method",
      "methodName": "subscribe",
      "package": "spritz"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "newElement": "method spritz.Subscription spritz.Stream<T>::subscribe(spritz.EventEmitter<T>)",
    "oldElement": "method void spritz.Stream<T>::subscribe(spritz.EventEmitter<T>)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "spritz.Stream",
      "classSimpleName": "Stream",
      "elementKind": "method",
      "methodName": "subscribe",
      "package": "spritz"
    }
  },
  {
    "code": "java.method.returnTypeChanged",
    "description": "The return type changed from 'void' to  'spritz.Subscription'.",
    "newElement": "method spritz.Subscription spritz.Stream<T>::subscribe(spritz.EventEmitter<T>)",
    "oldElement": "method void spritz.Stream<T>::subscribe(spritz.EventEmitter<T>)",
    "classification": {
      "SOURCE": "POTENTIALLY_BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "spritz.Stream",
      "classSimpleName": "Stream",
      "elementKind": "method",
      "methodName": "subscribe",
      "newType": "spritz.Subscription",
      "oldType": "void",
      "package": "spritz"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "newElement": "method spritz.Subscription spritz.Stream<T>::subscribe(spritz.Subscriber<? super T>) @ spritz.ConnectableStream<T>",
    "oldElement": "method void spritz.Stream<T>::subscribe(spritz.Subscriber<? super T>) @ spritz.ConnectableStream<T>",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "spritz.ConnectableStream",
      "classSimpleName": "ConnectableStream",
      "elementKind": "method",
      "methodName": "subscribe",
      "package": "spritz"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "newElement": "method spritz.Subscription spritz.Stream<T>::subscribe(spritz.Subscriber<? super T>) @ spritz.Hub<MessageInT, MessageOutT>",
    "oldElement": "method void spritz.Stream<T>::subscribe(spritz.Subscriber<? super T>) @ spritz.Hub<MessageInT, MessageOutT>",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "spritz.Hub",
      "classSimpleName": "Hub",
      "elementKind": "method",
      "methodName": "subscribe",
      "package": "spritz"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "newElement": "method spritz.Subscription spritz.Stream<T>::subscribe(spritz.Subscriber<? super T>) @ spritz.Subject<T>",
    "oldElement": "method void spritz.Stream<T>::subscribe(spritz.Subscriber<? super T>) @ spritz.Subject<T>",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "spritz.Subject",
      "classSimpleName": "Subject",
      "elementKind": "method",
      "methodName": "subscribe",
      "package": "spritz"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "newElement": "method spritz.Subscription spritz.Stream<T>::subscribe(spritz.Subscriber<? super T>) @ spritz.WebSocketHub",
    "oldElement": "method void spritz.Stream<T>::subscribe(spritz.Subscriber<? super T>) @ spritz.WebSocketHub",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "spritz.WebSocketHub",
      "classSimpleName": "WebSocketHub",
      "elementKind": "method",
      "methodName": "subscribe",
      "package": "spritz"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "newElement": "method spritz.Subscription spritz.Stream<T>::subscribe(spritz.Subscriber<? super T>)",
    "oldElement": "method void spritz.Stream<T>::subscribe(spritz.Subscriber<? super T>)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "spritz.Stream",
      "classSimpleName": "Stream",
      "elementKind": "method",
      "methodName": "subscribe",
      "package": "spritz"
    }
  },
  {
    "code": "java.method.returnTypeChanged",
    "description": "The return type changed from 'void' to  'spritz.Subscription'.",
    "newElement": "method spritz.Subscription spritz.Stream<T>::subscribe(spritz.Subscriber<? super T>)",
    "oldElement": "method void spritz.Stream<T>::subscribe(spritz.Subscriber<? super T>)",
    "classification": {
      "SOURCE": "POTENTIALLY_BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "spritz.Stream",
      "classSimpleName": "Stream",
      "elementKind": "method",
      "methodName": "subscribe",
      "newType": "spritz.Subscription",
      "oldType": "void",
      "package": "spritz"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nullable'.",
    "element": "method spritz.VirtualProcessorUnit spritz.Scheduler::currentVpu()",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nullable",
      "annotationType": "javax.annotation.Nullable",
      "classQualifiedName": "spritz.Scheduler",
      "classSimpleName": "Scheduler",
      "elementKind": "method",
      "methodName": "currentVpu",
      "package": "spritz"
    }
  },
  {
    "code": "java.annotation.removed",
    "description": "Element no longer annotated with 'javax.annotation.Nonnull'.",
    "element": "method spritz.VirtualProcessorUnit spritz.Scheduler::currentVpu()",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "spritz.Scheduler",
      "classSimpleName": "Scheduler",
      "elementKind": "method",
      "methodName": "currentVpu",
      "package": "spritz"
    }
  },
  {
    "code": "java.method.added",
    "description": "Method was added.",
    "newElement": "method void spritz.VirtualProcessorUnit::queue(java.lang.Runnable)",
    "classification": {
      "SOURCE": "NON_BREAKING",
      "BINARY": "NON_BREAKING"
    },
    "attachments": {
      "classQualifiedName": "spritz.VirtualProcessorUnit",
      "classSimpleName": "VirtualProcessorUnit",
      "elementKind": "method",
      "methodName": "queue",
      "package": "spritz"
    }
  },
  {
    "code": "java.method.removed",
    "description": "Method was removed.",
    "oldElement": "method void spritz.Scheduler::current(java.lang.Runnable)",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "spritz.Scheduler",
      "classSimpleName": "Scheduler",
      "elementKind": "method",
      "methodName": "current",
      "package": "spritz"
    }
  },
  {
    "code": "java.method.removed",
    "description": "Method was removed.",
    "oldElement": "method void spritz.Stream<T>::terminate(java.util.function.Supplier<spritz.Subscriber<T>>)",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "spritz.Stream",
      "classSimpleName": "Stream",
      "elementKind": "method",
      "methodName": "terminate",
      "package": "spritz"
    }
  }
]
